// Application configuration file for xnx
// The content can be changed according to developers' preference
//
// When the applicatiopn starts, it first looks for a file under option -c/--config,
// then for a file with this apecific name under the current directory, then under
// the application directory

{
  keywords: {
    // Boolean flag to allow automatic content expansion to a temporary file before executing the actual command
    canExpandContent: '{{-can-expand-content-}}',

    // Command or array or commands to execute; will be run only after the input and output files are defined;
    // after the execution, the output file path gets discarded; see also: run
    cmd: '{{-cmd-}}',

    // Current directory, can be changed explicitly, defaults to -d ... or to the start directory
    curDir: '{{-cur-dir-}}',

    // Regular expression to detect key which values should be expanded to the full path
    // No need to mention here 'curDir', 'inp' or 'out'
    detectPaths: '{{-detect-paths-}}',

    // Functions will be called under the value (hash map) for this key only
    func: '{{-func-}}',

    // Input file, allows glob patterns (will be expanded to the full path before command executrion)
    inp: '{{-inp-}}',

    // Input file directory path, gets calculated just before command execution
    inpDir: '{{-inp-dir-}}',

    // Input filename extension, gets calculated just before command execution
    // This element is used mainly to compose the output file path
    inpExt: '{{-inp-ext-}}',

    // Input filename without extension, gets calculated just before command execution
    // This element is used mainly to compose the output file path
    inpName: '{{-inp-name-}}',

    // Input filename with extension, gets calculated just before command execution
    // This element is used mainly to compose the output file path
    inpNameExt: '{{-inp-name-ext-}}',

    // Input file full path, gets calculated just before command execution
    // This element is used mainly to compose the output file path
    inpPath: '{{-inp-path-}}',

    // Input file sub-directory (relative to the current directory), gets calculated just before command execution
    // This element is used mainly to compose the output file path
    inpSubDir: '{{-inp-sub-dir-}}',

    // Input file sub-path (relative to the current directory), gets calculated just before command execution
    // This element is used mainly to compose the output file path
    inpSubPath: '{{-inp-sub-path-}}',

    // The value should represent explicit filename or file path
    // The content of that file will be embedded before the full application file parsing (similar to #include in C/C++)
    import: '{{-import-}}',

    // Anything under the value (hash map) for this key will be processed just once (useful for initialisation)
    once: '{{-once-}}',

    // Output file path
    out: '{{-out-}}',

    // Similar to cmd with the only difference that will be executed immediately without expecting 'inp' and/or 'out' to be defined
    // In this case, it is impossible to check whether the output file is up to date and no execution is required, unless forced
    run: '{{-run-}}',

    // The value is a pattern to skip input file, must be a hash map comprising 'mask' (glob) or 'regex' as well as bollean flags for
    // 'isPath' (match full path rather than the filename with extension), 'isNot' (the opposite match), 
    skip: '{{-skip-}}',

    // Stop execution immediately, the value under this key might be either null or a string to be displayed as an error message
    // The exit code will be 1 (failure)
    stop: '{{-stop-}}',

    // Similar to 'skip', but used to filter files from the 'inp' which defined as a wider glob pattern
    take: '{{-take-}}',

    // The path to this application's executable, similar to $~0
    this: '{{-this-}}',

    // Conditional: if operator
    if: '{{-if-}}',

    // Conditional: defines then-block (a hash map)
    then: '{{-then-}}',

    // Conditional: defines else-block (a hash map)
    else: '{{-else-}}',
  },

  // Function names (case-insensitive)

  functions: {
    fnAdd: '=Add',
    fnAddDays: '=AddDays',
    fnAddMonths: '=AddMonths',
    fnAddYears: '=AddYears',
    fnBaseName: '=BaseName',
    fnBaseNameNoExt: '=BaseNameNoExt',
    fnDate: '=Date',
    fnDirName: '=DirName',
    fnDiv: '=Div',
    fnDivInt: '=IDiv',
    fnEndOfMonth: '=EndOfMonth',
    fnExtension: '=Extension',
    fnFileSize: '=FileSize',
    fnIndex: '=Index',
    fnMatch: '=Match',
    fnLastIndex: '=LastIndex',
    fnLastMatch: '=LastMatch',
    fnLastModified: '=LastModified',
    fnLocal: '=Local',
    fnLower: '=Lower',
    fnMax: '=Max',
    fnMin: '=Min',
    fnMod: '=Mod',
    fnMul: '=Mul',
    fnNow: '=Now',
    fnReplace: '=Replace',
    fnReplaceMatch: '=ReplaceMatch',
    fnRun: '=Run',
    fnStartOfMonth: '=StartOfMonth',
    fnSub: '=Sub',
    fnSubstr: '=Substr',
    fnTime: '=Time',
    fnToday: '=Today',
    fnUpper: '=Upper',
    fnUtc: '=Utc',
  },
}