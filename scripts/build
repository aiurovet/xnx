#!/bin/bash

set -Eeo pipefail

################################################################################

PRJ="xnx"

################################################################################

function exitApp() {
  local ret=${1:-0}
  local msg="${2}"

  (( ${ret} != 0 )) && msg="*** ERROR: ${msg:-Build failed}"

  [[ "${msg}" != "" ]] && printf "\n%s\n\n" "${msg}"

  exit ${ret}
}

################################################################################

function parseCommandLine() {
    local opt

    OPT_MOVE=1
    OPT_COMPILE=1
    OST=""

    while getopts "kn" opt; do
        case "${opt}" in
            k) OPT_MOVE=0
               ;;
            n) OPT_COMPILE=0
               ;;
        esac
    done

    OPT_SHIFT=$(($OPTIND - 1))
    shift ${OPT_SHIFT}

    if ((${#} >= 1)); then
        OST="${1}"
        OPT_SHIFT=$((${OPT_SHIFT} + 1))
    fi
}

################################################################################

cd $(dirname $(dirname "${0}")) || exitApp 1 "Failed to switch to the top project directory"

parseCommandLine "${@}" || exitApp 1 "Failed to parse command-line options"
shift ${OPT_SHIFT}

################################################################################

if [[ "${OST}" == "" ]]; then
    OST=$(uname -s) || exitApp 1 "Failed to retrieve OS kernel name"
fi

if [[ "${OST}" =~ "darwin" ]]; then
    OST="macOS"
fi

OST_LC=$(echo "${OST}" | tr "[:upper:]" "[:lower:]")

export OST OST_LC

################################################################################

mkdir -p out || exitApp 1 "Failed to create directory \"out\""

EXE="out/${PRJ}"
TAR="app/${PRJ}-${OST_LC}.tar"

if ((${OPT_COMPILE} != 0)); then
    dart pub get || exitApp 1 "Failed to retrieve packages"
    echo "Compiling..."
    dart compile exe "bin/main.dart" -o "${EXE}" || exitApp 1 "Failed to compile the executable \"${EXE}\""
    wc -c "${EXE}" || exitApp 1 "Failed to compile the executable \"${EXE}\""
fi

cp -pr README.md out || exitApp 1 "Failed to copy the readme file to \"out\""
#scripts/mkicons/mkicons "${OST}" ${@} || exitApp 1 "Failed to create app icons"
cp -pr examples out || exitApp 1 "Failed to copy examples"
${EXE} --targz out "${TAR}.gz" || exitApp 1 "Failed to create the app archive"

if ((${OPT_MOVE} != 0)); then
    rm -rf out
fi

if [ -e "${TAR}" ]; then
    # For macOS
    ls -l "${TAR}"
    rm -f "${TAR}"
fi

exitApp 0 "The build successfully completed"

################################################################################
