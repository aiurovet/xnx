#!/bin/bash

set -Eeo pipefail

################################################################################

PRJ="xnx"
EXE="bin/${PRJ}"
OUT="out/${PRJ}"

################################################################################

function parseCommandLine() {
    local opt

    OPT_KEEP=0
    OS_TYPE=""

    while getopts "k" opt; do
        case "${opt}" in
            k) OPT_KEEP=1
               ;;
        esac
    done

    OPT_SHIFT=$(($OPTIND - 1))
    shift ${OPT_SHIFT}

    if ((${#} >= 1)); then
        OS_TYPE="${1}"
        OPT_SHIFT=$((${OPT_SHIFT} + 1))
    fi
}

################################################################################

echo "Switching to the top project directory"
cd $(dirname $(dirname "${0}"))

echo "Parsing command-line parameters"
parseCommandLine "${@}"
shift ${OPT_SHIFT}

################################################################################

if [[ "${OS_TYPE}" == "" ]]; then
    echo "Retrieving the default OS name"
    OS_TYPE=$(uname -s)
fi

if [[ "${OS_TYPE}" =~ "darwin" ]]; then
    OS_TYPE="macOS"
fi

OS_LOWER=$(echo "${OS_TYPE}" | tr "[:upper:]" "[:lower:]")

PKG="app/${PRJ}-${OS_LOWER}.tar"
PKZ="${PKG}.gz"

export OS_TYPE
echo "Running the ${OS_TYPE} build"

################################################################################

if [[ -d out ]]; then
    echo "Cleaning the output directory"
    rm -rf out/*
    mkdir -p "${OUT}"
else
    echo "Creating the output directory"
    mkdir -p "${OUT}"
fi

echo "Getting the latest version of the packages"
dart pub get

echo "Compiling \"${EXE}\""
dart compile exe bin/main.dart -o "${EXE}"

echo "Copying the executable to the output directory"
cp -p "${EXE}" "${OUT}"

echo "Copying installation instructions to the output directory"
cp -p INSTALL.txt "${OUT}"

echo "Copying README to the output directory"
cp -p README.md "${OUT}"

echo "Copying examples to the output directory"
cp -pr examples "${OUT}"

echo "Creating the icons in the output directory"
"${EXE}" -d "scripts/mkicons" ${@}

echo "Creating and compressing the application package"
${EXE} --move --pack out "${PKZ}"

################################################################################

echo ""
ls -l "${PKZ}"
echo ""

if [[ -d out ]]; then
    echo "Removing the output directory"
    rm -rf out
fi

if ((${OPT_KEEP} == 0)); then
    echo "Removing the binary"
    rm -rf "${EXE}"
fi

if [ -e "${PKG}" ]; then
    echo "Removing \"${PKG}\" again"
    rm -f "${PKG}"
fi

################################################################################

echo "The build successfully completed"
exit 0

################################################################################
