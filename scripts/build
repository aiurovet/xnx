#!/bin/bash

set -Eeo pipefail

################################################################################

PRJ="xnx"
VER="0.1.0"
DTL="A tool to eXpand templates aNd eXecute commands on those"

################################################################################

function parseCommandLine() {
    local opt

    OPT_KEEP=0
    OS_TYPE=""

    while getopts "k" opt; do
        case "${opt}" in
            k) OPT_KEEP=1
               ;;
        esac
    done

    OPT_SHIFT=$(($OPTIND - 1))
    shift ${OPT_SHIFT}

    if ((${#} >= 1)); then
        OS_TYPE="${1}"
        OPT_SHIFT=$((${OPT_SHIFT} + 1))
    fi
}

################################################################################

echo "Switching to the top project directory"
SCRIPT_DIR="$(dirname "${0}")"
cd "$(dirname "${SCRIPT_DIR}")"

echo "Parsing command-line parameters"
parseCommandLine "${@}"
shift ${OPT_SHIFT}

################################################################################

if [[ "${OS_TYPE}" == "" ]]; then
    echo "Retrieving the default OS name"
    OS_TYPE=$(uname -s)
fi

if [[ "${OS_TYPE}" =~ "darwin" ]]; then
    OS_TYPE="macOS"
fi

OS_TYPE=macOS

OS_LOWER=$(echo "${OS_TYPE}" | tr "[:upper:]" "[:lower:]")

export OS_TYPE
echo "Running the ${OS_TYPE} build"

################################################################################

EXE="bin/${PRJ}"
APP="app"

if [[ "${OS_TYPE}" == "macOS" ]]; then
    ARC=""
    PKG="${APP}/${PRJ}-${VER}-${OS_LOWER}"
    OUT="${PKG}/opt/${PRJ}/${VER}"
else
    ARC="_amd64"
    PKG="${APP}/${PRJ}-${VER}${ARC}"
    OUT="${PKG}/opt/${PRJ}/${VER}"
fi

################################################################################

echo "Discarding the packaging directory \"${PKG}\""
rm -rf "${PKG}"

echo "Creating the output directory \"${OUT}\""
mkdir -p "${OUT}"

echo "Getting the latest version of the packages"
dart pub get

echo "Compiling \"${EXE}\""
dart compile exe bin/main.dart -o "${EXE}"

echo "Copying the executable installation guide, readme, license and examples to the output directory"
cp -pr "${EXE}" INSTALL.txt LICENSE.txt README.md examples "${OUT}"

#echo "Creating the icons and moving those to the output directory"
#"${EXE}" -d "scripts/mkicons" "${PRJ}" "../../${OUT}" ${@}

"${SCRIPT_DIR}/pkg-${OS_LOWER}" "${PRJ}" "${VER}" "${ARC}" "${DTL}" "${PKG}"

################################################################################

if [[ -d out ]]; then
    echo "Removing the output directory"
    rm -rf out
fi

if ((${OPT_KEEP} == 0)); then
    echo "Removing the binary"
    rm -rf "${EXE}"
fi

################################################################################

echo "The build successfully completed"
exit 0

################################################################################
