name: Doul 

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    # Note that this workflow uses the latest stable version of the Dart SDK.
    # Docker images for other release channels - like dev and beta - are also
    # available. See https://hub.docker.com/r/google/dart/ for the available
    # images.
    ##container:
    ##  image:  google/dart:beta

    steps:

      ################################################################################

      - uses: actions/checkout@v2

      ################################################################################

      - name: Install icnsutils on Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install icnsutils

      ################################################################################

      - name: Install Dart SDK on non-Windows OS
        if: runner.os != 'windows'
        run: |
          brew install dart-lang/dart/dart-beta

      ################################################################################

      - name: Install Dart SDK on Windows
        if: runner.os == 'windows'
        run: |
          choco install dart-sdk --version=2.12.0.259-c-014-beta --pre > nul
          echo "C:\tools\dart-sdk\bin" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8

      ################################################################################

      - name: Post-Install Dart SDK on Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update

      ################################################################################

      - name: Install dependencies
        run: dart pub get

      ################################################################################

      # Uncomment this step to verify the use of 'dart format' on each commit.
      # - name: Verify formatting
      #   run: dart format --output=none --set-exit-if-changed .

      # Consider passing '--fatal-infos' for slightly stricter analysis.
      - name: Analyze project source
        run: dart analyze

      # Your project will need to have tests in test/ and a dependency on
      # package:test for this step to succeed. Note that Flutter projects will
      # want to change this to 'flutter test'.
      ##- name: Run tests
      ##  run: dart test

      ################################################################################

      - name: Compile to native (non-Windows)
        if: runner.os != 'Windows'
        run: dart2native bin/main.dart -o bin/${{ runner.os }}/doul

      - name: Compile to native (Windows)
        if: runner.os == 'Windows'
        run: dart2native bin/main.dart -o bin/${{ runner.os }}/doul.exe

      ################################################################################

      - name: Create application icons on Linux
        if: runner.os == 'Linux'
        run: bin/${{ runner.os }}/doul -d scripts/mkicons

      ################################################################################

      - name: Integration Test 1 - flutter_app
        run: bin/${{ runner.os }}/doul -d examples/flutter_app

      ################################################################################

      - name: Integration Test 2 - ms_office
        run: bin/${{ runner.os }}/doul -d examples/ms_office

      ################################################################################

      - name: Integration Test 3 - multi_conf
        run: bin/${{ runner.os }}/doul -d examples/multi_conf

      ################################################################################

      - name: Integration Test 4 - multi_icon
        run: bin/${{ runner.os }}/doul -d examples/multi_icon

      ################################################################################
