name: Doul

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    env:
      OSTYPE: ${{ matrix.os }}


    strategy:
      matrix:
        #os: [ ubuntu-latest, macos-latest, windows-latest ]
        #os: [ ubuntu-latest, macos-latest ]
        #os: [ ubuntu-latest, windows-latest ]
        #os: [ macos-latest, windows-latest ]
        #os: [ ubuntu-latest ]
        os: [ macos-latest ]
        #os: [ windows-latest ]

    # Note that this workflow uses the latest stable version of the Dart SDK.
    # Docker images for other release channels - like dev and beta - are also
    # available. See https://hub.docker.com/r/google/dart/ for the available
    # images.
    ##container:
    ##  image:  google/dart:beta

    steps:

      ################################################################################

      - uses: actions/checkout@v2

      ################################################################################

      - name: Installing the latest Google Chrome on macOS
        if: runner.os == 'macOS'
        run: |
          brew install --cask google-chrome

      ################################################################################

      #- name: Testing Chrome on macOS
      #  if: runner.os == 'macOS'
      #  run: /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --headless --crash-dumps-dir=/tmp --disk-cache-dir=/tmp --user-data-dir=/tmp --default-background-color=0 --window-size=16,16 --screenshot="/Users/runner/work/doul/doul/scripts/mkicons/icon_doul_16x16.png" "file:///Users/runner/work/doul/doul/scripts/mkicons/icon_doul_16x16.svg"

      ################################################################################

      - name: Install icnsutils on Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install icnsutils

      ################################################################################

      - name: Install Dart SDK on Linux/macOS
        if: runner.os != 'windows'
        run: |
          brew tap dart-lang/dart
          brew install dart

      ################################################################################

      - name: Install ImageMagick on Windows
        if: runner.os == 'windows'
        run: |
          choco install imagemagick.app # --no-progress does not work
          echo "%ProgramFiles%\ImageMagick-7.0.11-Q16-HDRI" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8

      ################################################################################

      - name: Install Dart SDK on Windows
        if: runner.os == 'windows'
        run: |
          choco install dart-sdk --version=2.12.0.259-c-014-beta --pre # --no-progress does not work
          echo "C:\tools\dart-sdk\bin" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8

      ################################################################################

      - name: Post-Install Dart SDK on Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update

      ################################################################################

      - name: Install dependencies
        run: dart pub get

      ################################################################################

      # Uncomment this step to verify the use of 'dart format' on each commit.
      # - name: Verify formatting
      #   run: dart format --output=none --set-exit-if-changed .

      # Consider passing '--fatal-infos' for slightly stricter analysis.
      - name: Analyze project source
        run: dart analyze

      # Your project will need to have tests in test/ and a dependency on
      # package:test for this step to succeed. Note that Flutter projects will
      # want to change this to 'flutter test'.
      ##- name: Run tests
      ##  run: dart test

      ################################################################################

      - name: Build the application on Linux/macOS
        if: runner.os != 'Windows'
        run: scripts/build "${{ runner.os }}"

      - name: Build the application on Windows
        if: runner.os == 'Windows'
        run: scripts\build

      ################################################################################

      - name: Integration Test 1 - flutter_app
        run: bin/${{ runner.os }}/doul -d examples/flutter_app

      ################################################################################

      - name: Integration Test 2 - ms_office
        run: bin/${{ runner.os }}/doul -d examples/ms_office

      ################################################################################

      - name: Integration Test 3 - multi_conf
        run: bin/${{ runner.os }}/doul -d examples/multi_conf

      ################################################################################

      - name: Integration Test 4 - multi_icon
        run: bin/${{ runner.os }}/doul -d examples/multi_icon

      ################################################################################

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: bin-${{ runner.os }}
          path: bin/${{ runner.os }}/

      ################################################################################
